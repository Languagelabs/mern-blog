initial configuration
*****************************************************************

++++++++++++++on vsc extension marketplace install ES7+ React/Redux/React-Native snippets +++++++++++++++++++++
++++++++++++++Multiple cursor case preserve+++++++++++++++++++++++++++++++
+++++++++++++ Tailwind Css Intellisense +++++++++++++++++++++++++++++++++++++++

mkdir mern-blog
npm create vite@latest  
project name = client 
----> select javascript + swc (for more speed)
cd client
npm i
---------------------------------------------------------------
google tailwind css with vite --> result below
npm install -D tailwindcss postcss autoprefixer
----------------------------------------------------------------
initialize tailwindcss by --> below
npx tailwindcss init -p

----------------------------------------------------------------
replace content of tailwind.config.js just created with --> below

/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}

------------------------------------------------------------

next go to index.css in the src directory and paste --> below

@tailwind base;
@tailwind components;
@tailwind utilities;

--------------------------------------------------------------

afterwards delete unnecessary files listed
App.css
public/svg file
src/assets/svg file
index.html clear previously deleted items (link vite.svg)
adjust the title tag in index.html to MERN blog

---------------------------------------------------------------

edit App.jsx to the basic react functional component APP --> below 

export default function App(){
  return(
    <div>App component</div>
  )
}
-------------------------------------------------------------------
npm run dev


******************************************************************
next phase
******************************************************************

on the terminal go back to the mern-blog folder by --> cd ..
*** initialize the github repository in the mern-blog directory using comand --> below
git init
git add . /// or git add all
git commit -m "Install react js and Tailwind Css and create the first template"

+++++ go to your github accout and create a new repository using this connect --> below
git remote add origin https://github.com/Languagelabs/mern-blog.git
git branch -M main
git push -u origin main


******************************************************************
next phase
******************************************************************

on a new terminal cd client and enable pages --> below
npm install react-router-dom

go to the src folder and create a new folder within called pages
create individual pages, Home, About,Projects,Dashboard,SignIn, SignUp .jsx respectively
inside each jsx document instert the react functional component aka rfc 

go to the App.jsx and run the following --> below
import { BrowserRouter, Routes, Route } from 'react-router-dom'
/////////////////////******>import each pages individually eg
import Home from './pages/Home.jsx'
///////////////***********>others etc...


insert an rfc accordingly  but this time include the BrowserRouter , Routes, and Route to enable pages--> below
export default function App(){
  return(
    <BrowserRouter>
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} /> 
        etc...
      </Routes>
    </BrowserRouter>
    )
}


you can commit to github after finishing creation of required pages and Routes

on vsc go to source control like a y shaped icon on the left of the screen open it
hover on 'Changes' and click on the + Sign (it means to add all Changes)
write a commit message in the message input field
click on the dropdown arrow and select Commit and push



*****************************************
next step
*****************************************

creating the header component

in the src folder create a subfolder called components
create a file called Header.jsx
insert an rfc into the Header.jsx
finally import this header  in the App.js --> below

    <BrowserRouter>
      <Header />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} /> 
        etc...
      </Routes>
    </BrowserRouter>


all previous code remains thesame notice that the header is consistent across all Routes

********************************************
next phase
********************************************

+++++++++++++install flowbite react as a dependency, its a ui library that makes building of components easy
visit webpage

on the terminal in the client directory enter the code --> below
npm i flowbite-react

++++update tailwind.config.js --> below
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    // ...
    'node_modules/flowbite-react/lib/esm/**/*.js',           <--
  ],
  plugins: [
    // ...
    require('flowbite/plugin'),                              <--
  ],
};

restart package 

on the header component design as required for pages existing
using the flowbite ui the flowbite ui eg Navbar , TextInput



*********
npm install react-icons

import {AiOutlineSearch} from 'react-icons/ai'
in a flowbite <TextInput /> invoke the react icon imported --> below

<form>
  <TextInput
    type='text'
    placeholder='Search...'
    rightIcon={AiOutlineSearch}
  />
</form>

refer to header component for all changes using flowbite and tailwind

*********************************************************
*********************************************************
*********************************************************
*********************************************************
backend
*******************************************************
*********************************************************
*********************************************************
*********************************************************

open a new folder called api
in the api directory create a file called index.js

in the root directory run --> below
npm install express nodemon

update the package.json to type module and scripts to run dev and start --> below

"type": "module",
  "scripts": {
    "dev": "nodemon api/index.js",
    "start": "node api/index.js"
  },

move the gitignore file in the client directory to the main or root directory

in the api/index.js -->
 
import express from 'express'

const app = express();

app.listen(3000, () => {
  console.log('Server is running on port 300')
})

in the terminal on the main directory --> below
npm run dev

*the above invokes nodemon to start index.js the dev in script earlier edited.
 in developmet ' npm run start ' it invokes the start 


connect mongoose and get the connection api stored in .env --> below

npm install mongoose dotenv

on api/index.js --> below

import express from 'express';
import mongoose from 'mongoose';
import dotenv from 'dotenv';

dotenv.config();

mongoose
.connect(process.env.MONGO)
.then(()=> {
    console.log('Mongodb connected')
})
.catch(err => {
    console.log('this is the error -> ' + err)
});

const app = express();

app.listen(3000, () => {
    console.log('Server is running on Port 3000')
});

***note ensure you store the mongodb variables in the .env file created as MONGO
enlist .env in the gitignore so it is excluded from github

commit changes and push


******************************************
creating user model***************
****************************************

we use models as a set of rules to facilitate database structuring ususally built like a schema

first in the api directory create a new directory called models
create a file called user.model.js

enter the following in the user.model.js --> below

import mongoose from 'mongoose';

const userSchema = new mongoose.schema({
  username: {
    type: String,
    unique: true,
    required: true,
  },
  email: {
    type: String,
    unique: true,
    required: true,
  },
  password: {
    type: String,
    required: true,
  },
}, {timestamps: true});

const User = mongoose.model('User', userSchema);
export default User;


************commit and push to github

*****************************************
next phase******** creating a test api route
*****************************************


on the api/index.js --> below

app.get('/test', (req, res) => {
  res.json({message: 'API is working})
});

--------------------------------------------
when there are a lot of routes on the api/index.js it can be disorganized

hence create a folder in the api directory called routes
inside the routes create a file called user.route.js  
instert the codes as such --> below

import express from 'express'
const router = express.Router();

router.get('/test', (req, res) => {
  res.json({ message: 'API working'})
})

export default router


-----> in the index.js update the app.get('/test', ...) delete block
add code  -------->below

import UserRoutes from './routes/user.route.js';  //////////// any name imports router. capitalize first letter

app.use('/api/user/', UserRoutes);


recall we moved our test api route from the index.js to the user.route.js
in a similar way we can separate the logic in the user.route.js ie.

(req, res) => {
  res.json({ message: 'API working'})
}

this is a logic placed in the route that should be moved to a controller since its the logic behind the user test api being created ..

--------------> in the api folder create a new folder called the controllers

inside the controller make a new file user.controller.js

insert code --> below

export const test = (req,res) => {
  res.json({ message: 'API working'})
}

in the user.route.js delete the 'logic function and replace with the imported constant test from controller

check changes


commit and push